{"primaryContentSections":[{"kind":"content","content":[{"anchor":"What-are-we-talking-about","level":2,"type":"heading","text":"What are we talking about?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since many programming patterns can be called by the ‚ÄúMVVM‚Äù and ‚ÄúDependency Injection‚Äù names, we‚Äôll start by making explicit our usage of those terms in this guide. Hopefully you will feel at home."}]},{"anchor":"MVVM","level":3,"type":"heading","text":"MVVM"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"MVVM"}]},{"type":"text","text":" stands for ‚ÄúModel-View-ViewModel‚Äù, and it describes an application architecture that distinguishes three types of objects:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"View"}]},{"type":"text","text":" is responsible for the UI. In a SwiftUI application, the view is a SwiftUI View."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"ViewModel"}]},{"type":"text","text":" implements application logic, feeds a view with on-screen values, and responds to view events. In a SwiftUI application, the type of a view model is often a class that conforms to the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" protocol."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Model"}]},{"type":"text","text":" feeds a view model. The current state of a game, values loaded from the network, values stored in a local database: these are models."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, we can have the "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" model (a regular Swift struct), the "},{"type":"codeVoice","code":"PlayerListViewModel"},{"type":"text","text":" (an observable object), and the "},{"type":"codeVoice","code":"PlayerListView"},{"type":"text","text":" (a SwiftUI view). Naming conventions may vary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An MVVM application is slightly more complex than a naive or ‚Äúquick and dirty‚Äù app, and there exists reasons for that. The "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Model-view-viewmodel"},{"type":"text","text":" describes a few of the MVVM goals. We can add a few technical ones:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A view model supports many kinds of tests: unit tests, integration tests, end-to-end tests, ui tests, you name it."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When view models access models through dependency injection, this helps testability. For example, one may want to test a view model in the context of a successful or failing network, or in the context of different database setups (empty database, large database, etc)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In a SwiftUI application, previews can be seen as quick visual tests. Again, dependency injection makes it possible to run previews in various contexts."}]}]}]},{"anchor":"Dependency-Injection","level":3,"type":"heading","text":"Dependency Injection"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Dependency Injection"}]},{"type":"text","text":", or DI, is a programming technique that allows separation of concerns. A typical benefit of DI, in an MVVM application, is to make the developer able to instantiate a view model in the desired context."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the application configures a view model with a real network access, while tests and previews use network mocks in order to leverage the desired behaviors."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the context of databases, the application uses a database persisted on disk, but tests and previews may prefer light and fast in-memory databases configured as desired."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There exist many available DI solutions for Swift, but this guide focuses on the one that is built-in with SwiftUI: "},{"type":"strong","inlineContent":[{"type":"text","text":"the SwiftUI environment"}]},{"type":"text","text":". Please refer to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environment"},{"type":"text","text":" to learn more about the environment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The SwiftUI environment has great developer ergonomics. For example, it is easy to configure previews:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView_Previews: PreviewProvider {","    static var previews: some View {","        \/\/ Default environment","        MyView(...)","","        \/\/ Specific environment","        MyView(...).environment(...)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The SwiftUI environment only applies to view hierarchies, and does not rely on any global or shared DI container. It can‚Äôt mess with other parts of the application:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some View {","    List {","        NavigationLink(\"Real Stuff\") { MyView() }","        NavigationLink(\"Sandbox\") { MyView().environment(...) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the SwiftUI environment as a DI solution does not force your view models to depend on SwiftUI, and it does not mean that the SwiftUI environment is the only way to access dependencies. In the code snippet below, the view model only depends on Combine (for "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"), and does not depend on SwiftUI at all:"}]},{"type":"codeListing","syntax":"swift","code":["import Combine \/\/ for ObservableObject","","class MyViewModel: ObservableObject {","    \/\/ We don't care if dependencies come from the SwiftUI environment","    \/\/ or from any other DI solution:","    init(database: MyDatabase, network: MyNetwork) { ... }","}"]},{"anchor":"Lifetimes-of-a-ViewModel","level":2,"type":"heading","text":"Lifetimes of a ViewModel"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a MVVM application, a view relies on its view model for grabbing on-screen values, and handling user actions. Keeping the view model alive is important as long as a view is on screen."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI ships with a lot of ready-made property wrappers that control the lifetime of view models, and you are probably already using them in your MVVM SwiftUI applications:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Environment"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environment","overridingTitle":"@Environment"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentobject"},{"type":"text","text":" support well view models that outlive the views they feed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/stateobject"},{"type":"text","text":" support view models that live exactly as long as a SwiftUI view."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/observedobject"},{"type":"text","text":" leaves the lifetime control to some other place in the application: it only propagates a view model through a view hierarchy."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We are lacking something, though. Sure, "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" can define a view model that lives exactly as long as a SwiftUI view. "},{"type":"strong","inlineContent":[{"type":"text","text":"Unfortunately, "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" does not support dependency injection via the SwiftUI environment:"}]}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    \/\/ How to grab dependencies from the SwiftUI environment? ","    @StateObject var viewModel = MyViewModel(???)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you‚Äôve already scratched your head in front of this puzzle, you‚Äôre at the correct place üôÇ. And let‚Äôs look at the solution below."}]},{"anchor":"The-EnvironmentStateObject-Property-Wrapper","level":2,"type":"heading","text":"The @EnvironmentStateObject Property Wrapper"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject"},{"type":"text","text":" is a property wrapper that instantiates an observable object from the SwiftUI environment:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    @EnvironmentStateObject var viewModel: MyViewModel","    ","    init() {","        _viewModel = EnvironmentStateObject { env in","            MyViewModel(database: env.database, network: env.network)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above sample code, "},{"type":"codeVoice","code":"env.database"},{"type":"text","text":" and "},{"type":"codeVoice","code":"env.network"},{"type":"text","text":" are defined with SwiftUI "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey"},{"type":"text","text":". See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted"},{"type":"text","text":" for some sample code."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" is quite similar to SwiftUI "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":", and provides the same essential services:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" instantiates the observable object right before the initial "},{"type":"codeVoice","code":"body"},{"type":"text","text":" rendering, and deallocates its when the view is no longer rendered."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When published properties of the observable object change, SwiftUI updates the parts of any view that depend on those properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Get a "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" to one of the observable object‚Äôs properties using the "},{"type":"codeVoice","code":"$"},{"type":"text","text":" operator."}]}]}]},{"anchor":"Previews","level":4,"type":"heading","text":"Previews"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" makes it possible to provide specific dependencies in SwiftUI previews:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView_Previews: PreviewProvider {","    static var previews: some View {","        \/\/ Default database and network","        MyView()","        ","        \/\/ Specific database, default network","        MyView().environment(\\.database, .empty)","        ","        \/\/ Specific database and network","        MyView()","            .environment(\\.database, .full)","            .environment(\\.network, .failingMock)","    }","}"]},{"anchor":"Extra-parameters","level":4,"type":"heading","text":"Extra parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can pass extra parameters:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    @EnvironmentStateObject var viewModel: MyViewModel","    ","    init(id: String) {","        _viewModel = EnvironmentStateObject { env in","            MyViewModel(database: env.database, network: env.network, id: id)","        }","    }","}"]},{"anchor":"Stricter-MVVM","level":4,"type":"heading","text":"Stricter MVVM"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some MVVM interpretations do not allow views to instantiate their view models. In this case, adapt the view initializer:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    @EnvironmentStateObject var viewModel: MyViewModel","    ","    init(_ makeViewModel: @escaping (EnvironmentValues) -> MyViewModel) {","        _viewModel = EnvironmentStateObject(makeViewModel)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you can control view model instantiations:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","    @EnvironmentStateObject var viewModel: RootViewModel","","    var body: some View {","        MyView { _ in viewModel.makeMyViewModel() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Yet expressive previews are still available:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView_Previews: PreviewProvider {","    static var previews: some View {","        \/\/ Default database and network","        MyView { env in","            MyViewModel(database: env.database, network: env.network)","        }","","        \/\/ Specific database, default network","        MyView { env in","            MyViewModel(database: .empty, network: env.network)","        }","","        \/\/ Specific database and network","        MyView { _ in","            MyViewModel(database: .full, network: .failingMock)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" handles view model protocols and generic views pretty well:"}]},{"type":"codeListing","syntax":"swift","code":["protocol MyViewModelProtocol: ObservableObject { ... }","","struct MyView<ViewModel: MyViewModelProtocol>: View {","    @EnvironmentStateObject var viewModel: ViewModel","    ","    init(_ makeViewModel: @escaping (EnvironmentValues) -> ViewModel) {","        _viewModel = EnvironmentStateObject(makeViewModel)","    }","}","","class MyViewModelA: MyViewModelProtocol { ... }","class MyViewModelB: MyViewModelProtocol { ... }","","struct RootView: View {","    @EnvironmentStateObject var viewModel: RootViewModel","","    var body: some View {","        HStack {","            MyView { _ in viewModel.makeMyViewModelA() }","            MyView { _ in viewModel.makeMyViewModelB() }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject"},{"type":"text","text":" documentation for more information."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdbquery\/mvvm"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/MVVM","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how the "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" property wrapper helps building MVVM applications."}],"kind":"article","metadata":{"roleHeading":"Article","title":"MVVM and Dependency Injection","role":"article","modules":[{"name":"GRDBQuery"}]},"hierarchy":{"paths":[["doc:\/\/GRDBQuery\/documentation\/GRDBQuery"]]},"seeAlsoSections":[{"title":"The MVVM architecture","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject"],"generated":true}],"references":{"https://developer.apple.com/documentation/swiftui/environmentobject":{"title":"@EnvironmentObject","titleInlineContent":[{"type":"codeVoice","code":"@EnvironmentObject"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentobject","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentobject"},"https://developer.apple.com/documentation/swiftui/observedobject":{"title":"@ObservedObject","titleInlineContent":[{"type":"codeVoice","code":"@ObservedObject"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/observedobject","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/observedobject"},"doc://GRDBQuery/documentation/GRDBQuery/GettingStarted":{"role":"collectionGroup","title":"Getting Started with @Query","abstract":[{"type":"text","text":"A step-by-step guide for using "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" in your SwiftUI application."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/grdbquery\/gettingstarted"},"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject":{"role":"symbol","title":"EnvironmentStateObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentStateObject"}],"abstract":[{"type":"text","text":"A property wrapper that instantiates an observable object from the"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI environment."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentStateObject"}],"url":"\/documentation\/grdbquery\/environmentstateobject"},"https://en.wikipedia.org/wiki/Model-view-viewmodel":{"title":"wikipedia page","titleInlineContent":[{"type":"text","text":"wikipedia page"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Model-view-viewmodel","url":"https:\/\/en.wikipedia.org\/wiki\/Model-view-viewmodel"},"doc://GRDBQuery/documentation/GRDBQuery":{"role":"collection","title":"GRDBQuery","abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery"},"https://developer.apple.com/documentation/swiftui/stateobject":{"title":"@StateObject","titleInlineContent":[{"type":"codeVoice","code":"@StateObject"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/stateobject","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/stateobject"},"https://developer.apple.com/documentation/swiftui/environmentkey":{"title":"EnvironmentKey","titleInlineContent":[{"type":"text","text":"EnvironmentKey"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey"},"https://developer.apple.com/documentation/swiftui/environment":{"title":"SwiftUI documentation","titleInlineContent":[{"type":"text","text":"SwiftUI documentation"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environment","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/environment"}}}