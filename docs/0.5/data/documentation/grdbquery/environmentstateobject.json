{"seeAlsoSections":[{"title":"The MVVM architecture","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/MVVM"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentStateObject"}],"title":"EnvironmentStateObject","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:9GRDBQuery22EnvironmentStateObjectV","modules":[{"name":"GRDBQuery"}],"navigatorTitle":[{"kind":"identifier","text":"EnvironmentStateObject"}]},"abstract":[{"type":"text","text":"A property wrapper that instantiates an observable object from the"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI environment."}],"sections":[],"identifier":{"url":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/GRDBQuery\/7SwiftUI15DynamicPropertyP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/GRDBQuery\/documentation\/GRDBQuery"]]},"topicSections":[{"title":"Creating an Environment State Object","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/init(_:)"]},{"title":"Getting the Value","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/wrappedValue","doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/projectedValue","doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/Wrapper"]},{"title":"SwiftUI Integration","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/update()"]}],"variants":[{"paths":["\/documentation\/grdbquery\/environmentstateobject"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentStateObject"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ObjectType"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ObjectType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"ObservableObject","preciseIdentifier":"s:7Combine16ObservableObjectP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" is similar to SwiftUI "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"provides the same essential services:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" instantiates the observable object right before"},{"type":"text","text":" "},{"type":"text","text":"the initial "},{"type":"codeVoice","code":"body"},{"type":"text","text":" rendering, and deallocates its when the view is no"},{"type":"text","text":" "},{"type":"text","text":"longer rendered."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When published properties of the observable object change, SwiftUI updates"},{"type":"text","text":" "},{"type":"text","text":"the parts of any view that depend on those properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Get a "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" to one of the observable objectâ€™s properties using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"$"},{"type":"text","text":" operator."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" brings on top of "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" is the"},{"type":"text","text":" "},{"type":"text","text":"ability to instantiate the observable object from the SwiftUI environment."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"If you do not need to instantiate your observable object from the SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"environment"}]},{"type":"text","text":", then "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" is not what you need. Just use"},{"type":"text","text":" "},{"type":"text","text":"the plain "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" instead."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"If the lifetime of your observable object is different from the one"},{"type":"text","text":" "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" would provide"}]},{"type":"text","text":", then "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" is not what"},{"type":"text","text":" "},{"type":"text","text":"you need. Have a look at "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":", "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":", etc."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Just as "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":", "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" "},{"type":"text","text":"ties the lifetime of the observable object to the lifetime of the"},{"type":"text","text":" "},{"type":"text","text":"view identity. Once the observable object has been instantiated (right"},{"type":"text","text":" "},{"type":"text","text":"before the initial "},{"type":"codeVoice","code":"body"},{"type":"text","text":" rendering), changes in environment values or"},{"type":"text","text":" "},{"type":"text","text":"other parameters are just ignored."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just like "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":", you can force a new instantiation of the"},{"type":"text","text":" "},{"type":"text","text":"observable object by changing the view identity."}]}],"type":"aside","name":"Important"},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical setup starts from an observable object that requires some"},{"type":"text","text":" "},{"type":"text","text":"dependencies (for example, access to the network, or to a database):"}]},{"type":"codeListing","syntax":"swift","code":["import Combine \/\/ For ObservableObject","","class MyModel: ObservableObject {","    let fieldTitle: String","    @Published var fieldValue: String","","    init(database: MyDatabase, network: MyNetwork) { ... }","","    func save() { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The application defines an "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey"},{"type":"text","text":" "},{"type":"text","text":"for dependencies in the SwiftUI environment:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","","extension EnvironmentValues {","    var database: MyService { ... }","    var network: MyNetwork { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now a view can use the "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","struct MyView: View {","    @EnvironmentStateObject var model: MyModel","","    init() {","        _model = EnvironmentStateObject { env in","            MyModel(database: env.database, network: env.network)","        }","    }","","    var body: some View {","        HStack {","            TextField(viewModel.fieldTitle, text: $model.fieldValue)","            Button(\"save\") { viewModel.save() }","        }","    }","}"]},{"anchor":"Configuring-the-Observable-Object","level":3,"type":"heading","text":"Configuring the Observable Object"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the observable object needs some extra configuration, update"},{"type":"text","text":" "},{"type":"text","text":"the initializers:"}]},{"type":"codeListing","syntax":"swift","code":["class MyModel: ObservableObject {","    init(database: MyDatabase, network: MyNetwork, id: String) { ... }","}","","struct MyView: View {","    @EnvironmentStateObject var model: MyModel","","    init(id: String) {","        _model = EnvironmentStateObject { env in","            MyModel(database: env.database, network: env.network, id: id)","        }","    }","}"]},{"anchor":"Decoupling-the-View-from-its-Observable-Object","level":3,"type":"heading","text":"Decoupling the View from its Observable Object"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can have the container view responsible for instantiating the"},{"type":"text","text":" "},{"type":"text","text":"observable object:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    @EnvironmentStateObject var model: MyModel","","    init(_ makeModel: @escaping (EnvironmentValue) -> MyModel) {","        _model = EnvironmentStateObject(makeModel)","    }","}","","struct RootView: View {","    var body: some View {","        MyView { env in MyModel(database: env.database, network: env.network) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique helps observable objects create other ones:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","    @EnvironmentStateObject var rootModel: RootModel","","    var body: some View {","        MyView { _ in rootModel.makeMyModel() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique is also useful for generic views that accept various types of"},{"type":"text","text":" "},{"type":"text","text":"observable objects:"}]},{"type":"codeListing","syntax":"swift","code":["protocol MyModelProtocol: ObservableObject { ... }","","struct MyView<Model: MyModelProtocol>: View {","    @EnvironmentStateObject var viewModel: Model","","    init(_ makeModel: @escaping (EnvironmentValues) -> Model) {","        _viewModel = EnvironmentStateObject(makeModel)","    }","}","","class MyModelA: MyModelProtocol { ... }","class MyModelB: MyModelProtocol { ... }","","struct RootView: View {","    @EnvironmentStateObject var viewModel: RootModel","","    var body: some View {","        HStack {","            MyView { _ in viewModel.makeMyModelA() }","            MyView { _ in viewModel.makeMyModelB() }","        }","    }","}"]},{"anchor":"SwiftUI-Previews","level":3,"type":"heading","text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" supports SwiftUI previews very well. It"},{"type":"text","text":" "},{"type":"text","text":"instantiates observable objects with the expected environment values."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView_Previews: PreviewProvider {","    static var previews: some View {","        \/\/ Default database and network","        MyView()","","        \/\/ Specific database, default network","        MyView().environment(\\.database, .empty)","","        \/\/ Specific database and network","        MyView()","            .environment(\\.database, .full)","            .environment(\\.network, .failingMock)","    }","}"]},{"anchor":"MVVM","level":3,"type":"heading","text":"MVVM"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" exists as a support for MVVM applications that use"},{"type":"text","text":" "},{"type":"text","text":"the SwiftUI environment as a solution for dependency injection. See"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/MVVM"},{"type":"text","text":" for more information."}]}]}],"references":{"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject":{"role":"symbol","title":"EnvironmentStateObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentStateObject"}],"abstract":[{"type":"text","text":"A property wrapper that instantiates an observable object from the"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI environment."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentStateObject"}],"url":"\/documentation\/grdbquery\/environmentstateobject"},"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject/Wrapper":{"role":"symbol","title":"EnvironmentStateObject.Wrapper","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Wrapper"}],"abstract":[{"type":"text","text":"A wrapper of the underlying object that can create bindings to its"},{"type":"text","text":" "},{"type":"text","text":"properties using dynamic member lookup."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/Wrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Wrapper"}],"url":"\/documentation\/grdbquery\/environmentstateobject\/wrapper"},"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject/wrappedValue":{"role":"symbol","title":"wrappedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ObjectType"}],"abstract":[{"type":"text","text":"The underlying object."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/wrappedValue","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery\/environmentstateobject\/wrappedvalue"},"doc://GRDBQuery/documentation/GRDBQuery/MVVM":{"role":"article","title":"MVVM and Dependency Injection","abstract":[{"type":"text","text":"Learn how the "},{"type":"codeVoice","code":"@EnvironmentStateObject"},{"type":"text","text":" property wrapper helps building MVVM applications."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/MVVM","kind":"article","type":"topic","url":"\/documentation\/grdbquery\/mvvm"},"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject/projectedValue":{"role":"symbol","title":"projectedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EnvironmentStateObject","preciseIdentifier":"s:9GRDBQuery22EnvironmentStateObjectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ObjectType"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Wrapper","preciseIdentifier":"s:9GRDBQuery22EnvironmentStateObjectV7WrapperV"}],"abstract":[{"type":"text","text":"A projection that creates bindings to the properties of the"},{"type":"text","text":" "},{"type":"text","text":"underlying object."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/projectedValue","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery\/environmentstateobject\/projectedvalue"},"doc://GRDBQuery/7SwiftUI15DynamicPropertyP":{"type":"unresolvable","title":"SwiftUI.DynamicProperty","identifier":"doc:\/\/GRDBQuery\/7SwiftUI15DynamicPropertyP"},"doc://GRDBQuery/documentation/GRDBQuery":{"role":"collection","title":"GRDBQuery","abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery"},"https://developer.apple.com/documentation/swiftui/environmentkey":{"title":"EnvironmentKey","titleInlineContent":[{"type":"text","text":"EnvironmentKey"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey"},"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject/update()":{"role":"symbol","title":"update()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"update"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Part of the SwiftUI "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":" protocol. Do not call this method."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/update()","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery\/environmentstateobject\/update()"},"doc://GRDBQuery/documentation/GRDBQuery/EnvironmentStateObject/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"EnvironmentValues","preciseIdentifier":"s:7SwiftUI17EnvironmentValuesV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ObjectType"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject"},{"type":"text","text":" with a closure that builds an"},{"type":"text","text":" "},{"type":"text","text":"object from environment values."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/EnvironmentStateObject\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery\/environmentstateobject\/init(_:)"}}}